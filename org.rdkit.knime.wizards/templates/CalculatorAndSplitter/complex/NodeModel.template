/*
 * ------------------------------------------------------------------
 * This source code, its documentation and all appendant files
 * are protected by copyright law. All rights reserved.
 *
 * Copyright (C)__CURRENT_YEAR__
 * Novartis Pharma AG, Switzerland
 *
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 */
package __BASE_PACKAGE__;

import java.util.ArrayList;
import java.util.Arrays;

import org.RDKit.RDKFuncs;
import org.RDKit.ROMol;
import org.RDKit.RWMol;
import org.knime.core.data.DataCell;
import org.knime.core.data.DataColumnSpec;
import org.knime.core.data.DataColumnSpecCreator;
import org.knime.core.data.DataRow;
import org.knime.core.data.DataTableSpec;
import org.knime.core.data.DataType;
<REMOVE IF(__PARALLEL_PROCESSING__==true)>        
import org.knime.core.data.container.CloseableRowIterator;
</REMOVE IF(__PARALLEL_PROCESSING__==true)>        
import org.knime.core.node.BufferedDataContainer;
import org.knime.core.node.BufferedDataTable;
import org.knime.core.node.ExecutionContext;
import org.knime.core.node.InvalidSettingsException;
import org.knime.core.node.NodeLogger;
import org.knime.core.node.defaultnodesettings.SettingsModelBoolean;
import org.knime.core.node.defaultnodesettings.SettingsModelString;
import org.rdkit.knime.nodes.AbstractRDKitCellFactory;
import org.rdkit.knime.nodes.AbstractRDKitNodeModel;
import org.rdkit.knime.types.RDKitAdapterCell;
import org.rdkit.knime.types.RDKitMolCellFactory;
import org.rdkit.knime.types.RDKitMolValue;
import org.rdkit.knime.util.InputDataInfo;
import org.rdkit.knime.util.SettingsUtils;

/**
 * This class implements the node model of the __NODE_NAME__ node
 * providing calculations based on the open source RDKit library.
 * __DESCRIPTION__
 * @author __VENDOR_NAME__ 
 */
public class __NODE_NAME__NodeModel extends AbstractRDKitNodeModel {

	//
	// Constants
	//
	
	/** The logger instance. */
	protected static final NodeLogger LOGGER = NodeLogger
			.getLogger(__NODE_NAME__NodeModel.class);
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // TODO: Add more input columns or change the name of the existing one. This index is used
	//       to access easily so-called InputDataInfo objects, which connect a concrete column
	//       of an input table with the column selection model of the node settings.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
	
	/** Input data info index for Mol value. */
	protected static final int INPUT_COLUMN_MOL = 0;
	
	//
	// Members
	//
	
	/** Settings model for the column name of the input column. */
    private final SettingsModelString m_modelInputColumnName =
            registerSettings(__NODE_NAME__NodeDialog.createInputColumnNameModel());

    /** Settings model for the column name of the new column to be added to the output table. */
    private final SettingsModelString m_modelNewColumnName =
    		registerSettings(__NODE_NAME__NodeDialog.createNewColumnNameModel());

    /** Settings model for the option to remove the source column from the output table. */
    private final SettingsModelBoolean m_modelRemoveSourceColumns =
    		registerSettings(__NODE_NAME__NodeDialog.createRemoveSourceColumnsOptionModel());
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // TODO: Add more settings here in the same style as above:
    //   1. Create a static method in the dialog class to generate the setting model.
    //   2. Call this new method and assign it to the model member variable.
    //   3. Don't forget to call registerSettings(...) as this will ensure proper handling. 
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    
    //
    // Internals
    //
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // TODO: Add internal member variables here to save intermediate execution results or
    //   settings derived from the user's configuration driving the behavior of execution. 
    ///////////////////////////////////////////////////////////////////////////////////////////////////

    //
    // Constructor
    //
    
    /**
     * Create new node model with one data in- and one out-port.
     */
    __NODE_NAME__NodeModel() {
    	
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: Change the number of input and output tables in the super(...) call. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////
    	super(1, 2);
    }

    //
    // Protected Methods
    //
    
    /**
     * {@inheritDoc}
     */
    @Override
    protected DataTableSpec[] configure(final DataTableSpec[] inSpecs)
            throws InvalidSettingsException {
    	// Reset warnings and check RDKit library readiness
    	super.configure(inSpecs);
    	
        // Auto guess the input column if not set - fails if no compatible column found
        SettingsUtils.autoGuessColumn(inSpecs[0], m_modelInputColumnName, RDKitMolValue.class, 0, 
        		"Auto guessing: Using column %COLUMN_NAME%.", 
        		"No RDKit Mol, SMILES or SDF compatible column in input table. Use the \"RDKit from Molecule\" " +
        			"node to convert SMARTS.", getWarningConsolidator()); 

        // Determines, if the input column exists - fails if it does not
        SettingsUtils.checkColumnExistence(inSpecs[0], m_modelInputColumnName, RDKitMolValue.class,  
        		"Input column has not been specified yet.",
        		"Input column %COLUMN_NAME% does not exist. Has the input table changed?");
        
        // Auto guess the new column name and make it unique
        String strInputColumnName = m_modelInputColumnName.getStringValue();
        SettingsUtils.autoGuessColumnName(inSpecs[0], null, 
        		(m_modelRemoveSourceColumns.getBooleanValue() ? 
        			new String[] { strInputColumnName } : null),
        		m_modelNewColumnName, strInputColumnName + " (__NODE_NAME__)");

        // Determine, if the new column name has been set and if it is really unique
        SettingsUtils.checkColumnNameUniqueness(inSpecs[0], null,
        		(m_modelRemoveSourceColumns.getBooleanValue() ? new String[] { 
        			m_modelInputColumnName.getStringValue() } : null),
        		m_modelNewColumnName, 
        		"Output column has not been specified yet.",
        		"The name %COLUMN_NAME% of the new column exists already in the input.");

	    ///////////////////////////////////////////////////////////////////////////////////////////////////
		// TODO: Add more checks here based on other settings models you may have added.
		// 		 Call getWarningConsolidator().saveWarning("A warning for the user");
		//       if something is incorrect.
    	///////////////////////////////////////////////////////////////////////////////////////////////////

        // Consolidate all warnings and make them available to the user
        generateWarnings();

        // Generate output specs
        return getOutputTableSpecs(inSpecs);
    }

    /**
     * This implementation generates input data info object for the input mol column
     * and connects it with the information coming from the appropriate setting model.
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
	protected InputDataInfo[] createInputDataInfos(int inPort, DataTableSpec inSpec)
		throws InvalidSettingsException {
    	
    	InputDataInfo[] arrDataInfo = null;
    	
   	    ///////////////////////////////////////////////////////////////////////////////////////////////////
    	// TODO: For every input port table generate here an array of InputDataInfo objects,
    	//       but only for the columns of interest. This links a SettingsModel that contains
    	//       a column name to the input column of the table. It also defines how we want to
    	//       deal with empty cells. Define one of the policy values here. Provide a default
    	//       value if you want to use the default value if the cell is empty during execution.
    	//       Also provide a list of DataValue classes that are acceptable. Based on this information
    	//       part of the settings validation is performed.
    	///////////////////////////////////////////////////////////////////////////////////////////////////
    	
    	// Specify input of table 1
    	if (inPort == 0) {
    		arrDataInfo = new InputDataInfo[1]; // We have only one input column
    		arrDataInfo[INPUT_COLUMN_MOL] = new InputDataInfo(inSpec, m_modelInputColumnName, 
    				InputDataInfo.EmptyCellPolicy.DeliverEmptyRow, null,
    				RDKitMolValue.class);
    	}
    	
    	return (arrDataInfo == null ? new InputDataInfo[0] : arrDataInfo);
    }
    

    /**
     * Returns the output table specification of the specified out port. 
     * 
     * @param outPort Index of output port in focus. Zero-based.
     * @param inSpecs All input table specifications.
     * 
     * @return The specification of all output tables.
     * 
     * @throws InvalidSettingsException Thrown, if the settings are inconsistent with 
     * 		given DataTableSpec elements.
     * 
     * @see #createOutputFactories(int)
     */
    protected DataTableSpec getOutputTableSpec(final int outPort, 
    		final DataTableSpec[] inSpecs) throws InvalidSettingsException {
    	DataTableSpec spec = null;

    	///////////////////////////////////////////////////////////////////////////////////////////////////
    	// TODO: Change the following lines to generate other output table specifications
    	// 		 for all output ports. The following default implementation appends for port 0
    	//       an RDKit Mol column at the end of the input columns. For port 1
    	//       it reuses the table specification of the input table.
    	///////////////////////////////////////////////////////////////////////////////////////////////////
   	
    	switch (outPort) {
    		case 0:
    			// Check existence and proper column type
    			InputDataInfo[] arrInputDataInfos = createInputDataInfos(0, inSpecs[0]);
    			arrInputDataInfos[0].getColumnIndex();
	            
    			// Copy all specs from input table (except input column, if configured)
	            ArrayList<DataColumnSpec> newColSpecs = new ArrayList<DataColumnSpec>();
	            String inputColumnName = m_modelInputColumnName.getStringValue().trim();
	            for (DataColumnSpec inCol : inSpecs[0]) {
	                if (!m_modelRemoveSourceColumns.getBooleanValue() || 
	                	!inCol.getName().equals(inputColumnName)) {
	                	newColSpecs.add(inCol);
	                }
	            }
	            
	            // Append result column(s)
	            newColSpecs.addAll(Arrays.asList(createOutputFactory(null).getColumnSpecs()));
	            spec = new DataTableSpec(
	                    newColSpecs.toArray(new DataColumnSpec[newColSpecs.size()]));    	
	            break;
	            
    		case 1:
    			// Second table has the same structure as input table
    			spec = inSpecs[0];
    			break;
        }
    	
    	return spec;
    }    
 
    /**
     * Creates an output factory to create cells based on the passed in
     * input.
     * 
     * @param arrInputDataInfos Array of input data information that is relevant
     * 		for processing.
     * 
     * @see #createInputDataInfos(int, DataTableSpec)
     */
	protected AbstractRDKitCellFactory createOutputFactory(InputDataInfo[] arrInputDataInfos)
		throws InvalidSettingsException {
		// Generate column specs for the output table columns produced by this factory
		DataColumnSpec[] arrOutputSpec = new DataColumnSpec[1]; // We have only one output column
		arrOutputSpec[0] = new DataColumnSpecCreator(
				m_modelNewColumnName.getStringValue().trim(), RDKitAdapterCell.RAW_TYPE)
				.createSpec();
	    	
		// Generate factory 
		AbstractRDKitCellFactory factory = new AbstractRDKitCellFactory(this, 
				AbstractRDKitCellFactory.RowFailurePolicy.DeliverEmptyValues,
				getWarningConsolidator(), arrInputDataInfos, arrOutputSpec) {
   			
   			@Override
   		    /**
   		     * This method implements the calculation logic to generate the new cells based on 
   		     * the input made available in the first (and second) parameter.
   		     * {@inheritDoc}
   		     */
   		    public DataCell[] process(InputDataInfo[] arrInputDataInfo, DataRow row, long lUniqueWaveId) throws Exception {
   		    	DataCell outputCell = null;
   		    	
   		    	// Calculate the new cells
   		    	ROMol mol = markForCleanup(arrInputDataInfo[INPUT_COLUMN_MOL].getROMol(row), lUniqueWaveId);    	
   		    	
   		    	///////////////////////////////////////////////////////////////////////////////////////////////////
   		    	// TODO: Replace the following sample line(s) to perform the calculation of your choice. You may
   		    	//       deliver one or multiple output cells depending on your column specs that you defined
   		    	//       above.
   		    	///////////////////////////////////////////////////////////////////////////////////////////////////
		    		
   		    	RWMol temp = markForCleanup(new RWMol(mol), lUniqueWaveId);
   		        
   		        if (temp.getNumAtoms() > 0) {
   		        	RDKFuncs.sanitizeMol(temp);
   		        	outputCell = RDKitMolCellFactory.createRDKitAdapterCell(temp);
   		        }
   		        else {
   		        	outputCell = DataType.getMissingCell();
                }
   		    	
   		        return new DataCell[] { outputCell };
   		    }
   		};
   		
   		// Enable or disable this factory to allow parallel processing 		
   		factory.setAllowParallelProcessing(__PARALLEL_PROCESSING__);	   		
    	
    	return factory;
    }
	
    /**
     * {@inheritDoc}
     */
    @Override
    protected BufferedDataTable[] processing(final BufferedDataTable[] inData, InputDataInfo[][] arrInputDataInfo,
    		final ExecutionContext exec) throws Exception {
        final DataTableSpec[] arrOutSpecs = getOutputTableSpecs(inData);

        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: You may create more or less output tables here. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        
        // Contains the rows with the result column
        final BufferedDataContainer port0 = exec.createDataContainer(arrOutSpecs[0]);
        
        // Contains the input rows if result computation fails
        final BufferedDataContainer port1 = exec.createDataContainer(arrOutSpecs[1]);
                
        // Get settings and define data specific behavior
        final int iInputIndex = arrInputDataInfo[0][INPUT_COLUMN_MOL].getColumnIndex();
        final int iTotalRowCount = inData[0].getRowCount();

        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: You may change the behavior here and adapt it fully to your needs. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////       
        final boolean bSplitBadRowsToPort1 = true;
        
        // Setup main factory
        final AbstractRDKitCellFactory factory = createOutputFactory(arrInputDataInfo[0]);
<REMOVE IF(__PARALLEL_PROCESSING__==false)>        
        final AbstractRDKitNodeModel.ResultProcessor resultProcessor = 
        	new AbstractRDKitNodeModel.ResultProcessor() {
			
        	/**
        	 * {@inheritDoc}
        	 * This implementation determines, if the cell 0 in the results is missing.
        	 * If it is missing and the setting tells to split the tables, 
        	 * then the original input row is added to table 1. Otherwise the input row 
        	 * gets merged with the cell 0 and is added to table 0.
        	 */
			@Override
			public void processResults(long rowIndex, DataRow row, DataCell[] arrResults) {      
		        ///////////////////////////////////////////////////////////////////////////////////////////////////
		        // TODO: Implement here how the computed results shall be handled. They are usually added
				//       to one of the output tables. Due to the nature of the parallel processing 
				//       implementation it is not recommended to do expensive calculations here.
				//       Every computing thread will go through this method subsequentially, hence we
				//       decrease performance dramatically. If there are additional calculations to
				//       be done consider implementing the postProcessing(...) method. 
				//       The default implementation is acting conditionally on missing result cells.
		        ///////////////////////////////////////////////////////////////////////////////////////////////////
		        if (arrResults[0].isMissing() && bSplitBadRowsToPort1) {
		            port1.addRowToTable(row);
		        } 
		        else {
		        	port0.addRowToTable(AbstractRDKitCellFactory.mergeDataCells(row, arrResults, 
		        		m_modelRemoveSourceColumns.getBooleanValue() ? iInputIndex : -1));
		        }
			}
		};
		
        // Runs the multiple threads to do the work
        try {
        	new AbstractRDKitNodeModel.ParallelProcessor(factory, resultProcessor, iTotalRowCount, 
       			getWarningConsolidator(), exec).run(inData[0]);
        } 
        catch (Exception e) {
            exec.checkCanceled();
            throw e;
        }
</REMOVE IF(__PARALLEL_PROCESSING__==false)>        
<REMOVE IF(__PARALLEL_PROCESSING__==true)>        
		
		// Iterate through all input rows, calculate results and split the output
		int rowIndex = 0;
		for (CloseableRowIterator i = inData[0].iterator(); i.hasNext(); rowIndex++) {
			DataRow row = i.next();
			DataCell[] arrResults = factory.getCells(row);
		    if (arrResults[0].isMissing() && bSplitBadRowsToPort1) {
		        port1.addRowToTable(row);
		    } 
		    else {
		    	port0.addRowToTable(AbstractRDKitCellFactory.mergeDataCells(row, arrResults, 
		    		m_modelRemoveSourceColumns.getBooleanValue() ? iInputIndex : -1));
		    }
		    
		    // Every 20 iterations check cancellation status and report progress
		    if (rowIndex % 20 == 0) {
		        AbstractRDKitNodeModel.reportProgress(exec, rowIndex, iTotalRowCount, row);
		    }
		};
		
		exec.checkCanceled();
		exec.setProgress(1.0, "Finished Processing");
</REMOVE IF(__PARALLEL_PROCESSING__==true)>        

		port0.close();
        port1.close();
        
        return new BufferedDataTable[] { port0.getTable(), port1.getTable() };
    }	
      
	/**
	 * Returns the percentage of pre-processing activities from the total execution.
	 *
	 * @return Percentage of pre-processing. Returns __PRE_PROC_PERCENTAGE__d.
	 */
	protected double getPreProcessingPercentage() {
		return __PRE_PROC_PERCENTAGE__d;
	}
	
	/**
	 * This method gets called from the method {@link #execute(BufferedDataTable[], ExecutionContext)}, before
	 * the row-by-row processing starts. All necessary pre-calculations can be done here. Results of the method
	 * should be made available through member variables, which get picked up by the other methods like
	 * process(InputDataInfo[], DataRow) in the factory or 
	 * {@link #postProcessing(BufferedDataTable[], BufferedDataTable[], ExecutionContext)} in the model.
	 * 
	 * @param inData The input tables of the node.
	 * @param arrInputDataInfo Information about all columns of the input tables.
	 * @param exec The execution context, which was derived as sub-execution context based on the percentage
	 * 		setting of #getPreProcessingPercentage(). Track the progress from 0..1.
	 * 
	 * @throws Exception Thrown, if pre-processing fails.
	 */
	protected void preProcessing(final BufferedDataTable[] inData, InputDataInfo[][] arrInputDataInfo,
		final ExecutionContext exec) throws Exception {
		   
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: You may do generate data here, which are needed to process the results
        //       later row by row. The calculations in this method are normally based on 
        //       the passed in inData table(s). Results are not made available via return
        //       value, but should be stored as member variables of this model class.
        //       These intermediate results can be used in the factories 
        //       (see createOutputFactories) for processing of the core results. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Does not do anything by default
		exec.setProgress(1.0d);
	}	

	/**
	 * Returns the percentage of post-processing activities from the total execution.
	 *
	 * @return Percentage of post-processing. Returns __POST_PROC_PERCENTAGE__d.
	 */
	protected double getPostProcessingPercentage() {
		return __POST_PROC_PERCENTAGE__d;
	}     
	
	/**
	 * This method gets called from the method {@link #execute(BufferedDataTable[], ExecutionContext)}, after
	 * the row-by-row processing has ended a new result table set has been created. 
	 * All necessary post-calculations can be done here, e.g. creating a completely new table by filtering
	 * the intermediate table. The returned table array will be returned also from the execute method. 
	 * 
	 * @param inData The input tables of the node.
	 * @param arrInputDataInfo Information about all columns of the input tables.
	 * @param processingResult Tables of the core processing.
	 * @param exec The execution context, which was derived as sub-execution context based on the percentage
	 * 		setting of #getPreProcessingPercentage(). Track the progress from 0..1.
	 * 
	 * @return The final result tables to be returned by {@link #execute(BufferedDataTable[], ExecutionContext)}.
	 * 		By default it just returns the tables passed in as processingResult tables.
	 * 
	 * @throws Exception Thrown, if post-processing fails.
	 */
	protected BufferedDataTable[] postProcessing(final BufferedDataTable[] inData, InputDataInfo[][] arrInputDataInfo, 
		final BufferedDataTable[] processingResult, final ExecutionContext exec) throws Exception {
				   
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: Generate final result data here, which are based on the core processing
        //       results passed in as processingResult table(s). Final results are made 
        //       available via return value and become the final result table(s) of the 
        //       KNIME node.  
        ///////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Does not do anything by default - just returns the core result table(s) again
		exec.setProgress(1.0d);
		return processingResult;
	}	 
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void cleanupIntermediateResults() {
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO: Reset any intermediate result here. Be careful to check for null before accessing
        //       methods of an intermediate result object. It may have never been instantiated, if
        //       the user pressed cancel before.
        ///////////////////////////////////////////////////////////////////////////////////////////////////
	}	 	 
}